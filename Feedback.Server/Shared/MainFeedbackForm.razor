@using Feedback.Server.Validators
@using System.ComponentModel.DataAnnotations

@inject FeedbackContext _context;
@inject ICustomEmailService _emailService;
@inject ISnackbar _snackbar;

<MudForm @ref="form" Model="Contact" Validation="СontactValidator.ValidateValue">

    <MudTextField @bind-Value="Contact.LastName" For="() => Contact.LastName" Label="Фамилия" />

    <MudTextField @bind-Value="Contact.Name" For="() => Contact.Name" Label="Имя" />

    <MudTextField @bind-Value="Contact.MiddleName" Label="Отчество" />

    <MudSelect @bind-Value="Contact.IdTopic" AnchorOrigin="Origin.BottomCenter" For="() => Contact.IdTopic" Label="Предмет обращения">

        <MudSelectItem Disabled="true" Value="0">---</MudSelectItem>

        @foreach (var topic in Topics)
        {
            <MudSelectItem Value="@topic.Id">@topic.Value</MudSelectItem>
        }

    </MudSelect>

    @if (SubjectId == 0)
    {
        <MudSelect @bind-Value="Contact.IdSubject" AnchorOrigin="Origin.BottomCenter" For="() => Contact.IdSubject" Label="Тема обращения">

            <MudSelectItem Disabled="true" Value="0">---</MudSelectItem>

            @foreach (var subject in Subjects)
            {
                <MudSelectItem Value="@subject.Id">@subject.Value</MudSelectItem>
            }

        </MudSelect>
    }

    <MudTextField @bind-Value="Contact.StudentGroup" HelperText="Для обучающихся" For="() => Contact.StudentGroup" Label="Группа/Шифр" />

    <MudTextField @bind-Value="Contact.Telephone" For="() => Contact.Telephone" InputType="InputType.Telephone" Label="Телефон" />

    @if (!string.IsNullOrWhiteSpace(Contact.Telephone))
    {
        <MudCheckBox @bind-Checked="Contact.HasWhatsApp" Disabled="string.IsNullOrWhiteSpace(Contact.Telephone)" Label="WhatsApp?" Style="margin-top: 15px;" />
    }

    <MudTextField @bind-Value="Contact.Email" For="() => Contact.Email" Label="Почта" />

    <MudTextField @bind-Value="Contact.Message" AutoGrow For="() => Contact.Message" Label="Текст обращения" />

     <MudGrid Justify="Justify.SpaceBetween" Spacing="1 ">
         <MudItem Class="d-flex align-center" lg="6" md="8" Style="margin-top: 15px;" xs="12">
             <MudCheckBox @bind-Checked="Agree" Label=" Я даю согласие на обработку своих персональных данных" Required="true" RequiredError="@string.Empty" />
         </MudItem>
         <MudItem Class="d-flex align-center" lg="4" md="6" Style="margin-top: 5px; justify-content:end" xs="12">
             <MudButton OnClick="async () => await Submit()" Variant="Variant.Filled" Style="background-color: #03787c; color: white">Отправить</MudButton>
         </MudItem>
     </MudGrid>
 </MudForm>

 @code {
    [Parameter] public int SubjectId { get; set; }

    private Contact Contact;

    MudForm form;

    private ContactValidator СontactValidator = new();

    private List<Subject> Subjects = new();
    private List<Topic> Topics = new();

    private bool Agree { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Contact = NewContact();
        Subjects = await _context.Subjects.Where(x => !x.Hide).OrderByDescending(x => x.Priority).ThenBy(x => x.ShortValue).ToListAsync();
        Topics = await _context.Topics.ToListAsync();

    }

    private async Task Submit()
    {
        if (!form.IsValid)
        {
            await form.Validate();
            return;
        }

        Contact.CreationTime = DateTime.Now.ToLocalTime();

        _context.Contacts.Add(Contact);

        try
        {
            await _context.SaveChangesAsync();

            Task.Run(() => _emailService.CreateAndSend(Contact.Subject, MailType.Create));

            _snackbar.Add("Сообщение успешно отправлено", Severity.Success);

            Contact = NewContact();

            Agree = false;
        }
        catch
        {
            _snackbar.Add("Что-то пошло не так", Severity.Error);
        }
    }

    private Contact NewContact() =>
        SubjectId != 0 ? new() { IdSubject = SubjectId } : new();
}