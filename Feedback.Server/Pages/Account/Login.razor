@page "/account/login"

@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore.ChangeTracking

@inject FeedbackContext DatabaseContext;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;

<AuthorizeView>
    <NotAuthorized>
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudForm @ref="form">
                        <MudTextField @bind-Value="LoginString" Label="Имя пользователя" Required="true" RequiredError="Это обязательное поле" T="string" />
                        <MudTextField @bind-Value="Password" InputType="InputType.Password" Label="Пароль" Required="true" RequiredError="Это обязательное поле" T="string" />

                        <div class="d-flex align-center justify-space-between">
                            <MudButton Class="ml-auto" Color="Color.Primary" OnClick="Submit" Variant="Variant.Filled">Авторизоваться</MudButton>
                        </div>
                    </MudForm>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </NotAuthorized>
    <Authorized>Привет, @(context.User.Identity.Name)</Authorized>
</AuthorizeView>

@code {
    MudForm form;

    private string? LoginString { get; set; }

    private string? Password { get; set; }

    private async void DoLogin()
    {
        UserAccount? user = DatabaseContext.UserAccounts.Include(x => x.UserAccountRoles).ThenInclude(x => x.Role).FirstOrDefault(x => x.Login == LoginString);

        bool isAnonymous = user is null || !BCrypt.Net.BCrypt.Verify(Password, user.PasswordHash);

        if (isAnonymous)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Неправильный логин или пароль");
            return;
        }

        LoginPermit newLoginPermit = new()
        {
            IdUserAccount = user.Id,
            IsActive = true,
            CreatedAt = DateTime.Now.ToLocalTime()
        };

        EntityEntry<LoginPermit> newEntityEntry = DatabaseContext.LoginPermits.Add(newLoginPermit);

        DatabaseContext.SaveChanges();

        NavigationManager.NavigateTo($"/account/login/callback?idLoginPermit={newLoginPermit.Id}", true);
    }

    private void Submit()
    { 
        if (form.IsValid)
        {
            Console.WriteLine("YES");
            DoLogin();
            return;
        }

        form.Validate();
    }
}