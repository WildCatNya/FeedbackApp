@page "/contacts/view"

@using System.Security.Claims
@using Feedback.Server.Services

@inject FeedbackContext _context;
@inject ICustomEmailService _emailService;
@inject ISnackbar _snackbar;

@attribute [Authorize]

<PageTitle>Заявки</PageTitle>

@if (Contacts is null)
{
    <p>Загрузка...</p>
}
else if (!Contacts.Any())
{
    <p>Данных нет</p>
}
else
{
    <MudTabs ApplyEffectsToContainer="true" Elevation="2" PanelClass="pa-6" Rounded="true">
        @foreach (var subjectGroup in Contacts.GroupBy(x => x.Subject.ShortValue).OrderBy(x => x.Key))
        {
            <MudTabPanel>
                <TabContent>
                    @{
                        int count = subjectGroup.Count(x => !x.IsCompleted);
                    }
                    @if (count != 0)
                    {
                        <AuthorizeView Roles="@($"{RolesNames.Creator},{RolesNames.Admin}")">
                            <Authorized>
                                <MudIconButton Icon="@Icons.Material.Filled.Notifications" OnClick="() => Notify(subjectGroup.Key)" />
                            </Authorized>
                        </AuthorizeView>
                    }
                    <MudBadge Bordered="true" BadgeClass="mud-theme-custom" Content="@count" Overlap="true" Visible="@(count != 0)">@subjectGroup.Key</MudBadge>
                    </TabContent>
                    <ChildContent>
                        <MudGrid Justify="Justify.FlexStart">
                            @foreach (var contact in subjectGroup)
                        {
                            <MudItem xs="12" md="6" lg="4">
                                <ContactViewComponent Contact="@contact" StateChangeEventCallback="StateChangeEventCallbackHandler" />
                            </MudItem>
                        }
                    </MudGrid>
                </ChildContent>
            </MudTabPanel>
        }
    </MudTabs>
}

@code {
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private List<Contact>? Contacts = [];

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await AuthenticationStateTask;

        IEnumerable<Claim>? roleClaims = authenticationState.User.Claims.Where(x => x.Type.Contains("role"));

        if (roleClaims.Any())
        {
            var contacts = _context.Contacts.OrderByDescending(x => !x.IsCompleted).ThenByDescending(x => x.CreationTime);

            string[] roles = roleClaims.Select(x => x.Value).ToArray();

            if (authenticationState.User.IsInRoles(RolesNames.Creator, RolesNames.Admin, RolesNames.AllSeeing))
            {
                bool allseeing = authenticationState.User.IsInRoles(RolesNames.Creator, RolesNames.CanConceal);

                Contacts = await (allseeing ? contacts : contacts.Where(x => !x.Hide)).ToListAsync();
            }
            else
            {
                Contacts = await contacts.Where(contact => roles.Any(role => contact.Subject.Role.Name == role)).Where(x => !x.Hide).ToListAsync();
            }
        }
    }

    private async void Notify(string subjectShortValue)
    {
        Subject? subject = await _context.Subjects.FirstOrDefaultAsync(x => x.ShortValue == subjectShortValue);

        if (subject is not null)
        {
            Task.Run(() => _emailService.CreateAndSend(subject, MailType.Notify, "У вас есть нерешенные заявки: " + MailKitEmailCreator.ContactViewUrl));
            _snackbar.Add("Сообщение успешно отправлено", Severity.Success);
        }
        else
        {
            _snackbar.Add("Такая тема не была найдена", Severity.Error);
        }
    }

    private void StateChangeEventCallbackHandler() => StateHasChanged();
}