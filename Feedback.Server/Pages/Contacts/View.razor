@page "/contacts/view"

@using System.Security.Claims

@inject FeedbackContext _context;

@attribute [Authorize]

@if (Contacts is null)
{
    <p>Загрузка...</p>
}
else if (!Contacts.Any())
{
    <p>Данных нет</p>
}
else
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        @foreach (var subjectGroup in Contacts.GroupBy(x => x.Subject.ShortValue))
        {
            int count = @subjectGroup.Count(x => !x.IsCompleted);

            <MudTabPanel Text="@subjectGroup.Key">
                <TabContent>
                    @if (count != 0)
                    {
                        <MudBadge Color="Color.Primary" Content="@subjectGroup.Count(x => !x.IsCompleted)" Overlap="true" Bordered="true">@subjectGroup.Key</MudBadge>
                    }
                    else
                    {
                        <MudText>@subjectGroup.Key</MudText>
                    }
                </TabContent>
                <ChildContent>
                    <MudGrid Justify="Justify.FlexStart">
                        @foreach (var contact in subjectGroup)
                        {
                            <MudItem xs="12" md="6" lg="4">
                                <ContactViewComponent Contact="@contact" />
                            </MudItem>
                        }
                    </MudGrid>
                </ChildContent>
            </MudTabPanel>
        }
    </MudTabs>
}

@code {
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private List<Contact>? Contacts = [];

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await AuthenticationStateTask;

        IEnumerable<Claim>? roleClaims = authenticationState.User.Claims.Where(x => x.Type.Contains("role"));

        if (roleClaims.Any())
        {
            string[] roles = roleClaims.Select(x => x.Value).ToArray();

            if (roles.Any(role => role.Contains("Admin") || role.Contains("AllGroups")))
            {
                if (roles.Any(role => role.Contains("SuperAdmin")))
                {
                    Contacts = await _context.Contacts.ToListAsync();
                    return;
                }

                Contacts = await _context.Contacts.Where(x => !x.Hide).ToListAsync();
            }
            else
            {
                Contacts = await _context.Contacts.Where(contact => roles.Any(role => contact.Subject.Role.Name == role)).Where(x => !x.Hide).ToListAsync();
            }
        }
    }
}